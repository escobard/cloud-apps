workflows:
  version: 2
  automated-tests:
    jobs:
      #- ui-unit-tests
      #- ui-e2e-tests:
      #    requires:
      #     - ui-unit-tests
      #
      #- api-unit-tests
      #- api-integration-tests:
       #   requires:
        #    - ui-unit-tests
      - push_image_to_ecr      
version: 2
orbs:
  aws-ecr: circleci/aws-ecr@6.4.0
jobs:
  ui-unit-tests:
    working_directory: ~/client/ui
    docker:
      - image: circleci/node:12.13.1 # this may cause issues, revert to 10.14.1 if needed
    steps:
      - checkout
      - run:
          name: update-npm
          command: "cd client/ui && sudo npm install -g npm@latest"
      - restore_cache:
          key: dependency-cache-{{ checksum "client/ui/package.json" }}
      - run:
          name: install-ui
          command: "cd client/ui && npm install --legacy-peer-deps"
      - save_cache:
          key: dependency-cache-{{ checksum "client/ui/package.json" }}
          paths:
            - ./node_modules
      - run:
          name: lint
          command: "cd client/ui && npm run lint"
      - run:
          name: unit-tests
          command: "cd client/ui && npm test"
  api-unit-tests:
    working_directory: ~/server/api
    docker:
      - image: circleci/node:12.13.1
    steps:
      - checkout
      - run:
          name: update-npm
          command: "cd server/api && sudo npm install -g npm@latest"
      - restore_cache:
          key: dependency-cache-{{ checksum "server/api/package.json" }}
      - run:
          name: install-api
          command: "cd server/api && npm install"
      - save_cache:
          key: dependency-cache-{{ checksum "server/api/package.json" }}
          paths:
            - ./node_modules
      - run:
          name: lint
          command: "cd server/api && npm run lint"
      - run:
          name: unit-tests
          command: "cd server/api && npm test"
  api-integration-tests:
    working_directory: ~/server/tests
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
      - run:
          name: api-integration-tests
          command: |
            docker-compose -f integration-tests.yaml up --exit-code-from integration
  ui-e2e-tests:
    working_directory: ~/client/tests
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
      - run:
          name: ui-e2e-tests
          command: |
            docker-compose -f e2e-tests.yaml up --exit-code-from e2e
  push_image_to_ecr:
    working_directory: ~/repository
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:latest"' >> $BASH_ENV
      
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
      - run:
          name: Install dependencies for AWS
          command: |
            pip install --upgrade awscli        
      - run:
          name: Push all services images to AWS ECR using docker compose
          command: |
            eval echo ${FULL_IMAGE_NAME}
            eval echo ${AWS_DEFAULT_REGION}
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            ls -altr
            docker-compose -f dev.yaml push


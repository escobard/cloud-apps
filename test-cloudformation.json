{
    "AWSTemplateFormatVersion" : "2010-09-09",
  
    "Description" : "AWS CloudFormation Sample Template Elastic-Beanstalk-in-vpc.template: Sample template showing how to create an Elastic Beanstalk environment in a VPC. The stack contains 2 subnets: the first subnet is public and contains the load balancer, a NAT device for internet access from the private subnet and a bastion host to allow SSH access to the Elastic Beanstalk hosts. The second subnet is private and contains the Elastic Beanstalk instances. You will be billed for the AWS resources used if you create a stack from this template.",
  
    "Parameters" : {
  
      "BastionKeyName" : {
        "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
        "Type" : "String",
        "MinLength": "1",
        "MaxLength": "64",
        "AllowedPattern" : "[-_ a-zA-Z0-9]*",
        "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
      },
  
      "InstanceKeyName" : {
        "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the Elastic Beanstalk hosts",
        "Type" : "String",
        "MinLength": "1",
        "MaxLength": "64",
        "AllowedPattern" : "[-_ a-zA-Z0-9]*",
        "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
      },
  
      "SSHFrom" : {
        "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
        "Type" : "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default" : "0.0.0.0/0",
        "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
      },
  
      "BastionInstanceType" : {
        "Description" : "Bastion Host EC2 instance type",
        "Type" : "String",
        "Default" : "m1.small",
        "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },
  
      "NATInstanceType" : {
        "Description" : "NAT Device EC2 instance type",
        "Type" : "String",
        "Default" : "m1.small",
        "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      }
    },
  
    "Mappings" : {
      "AWSNATAMI" : {
        "us-east-1"      : { "AMI" : "ami-c6699baf" },
        "us-west-2"      : { "AMI" : "ami-52ff7262" },
        "us-west-1"      : { "AMI" : "ami-3bcc9e7e" },
        "eu-west-1"      : { "AMI" : "ami-0b5b6c7f" },
        "ap-southeast-1" : { "AMI" : "ami-02eb9350" },
        "ap-northeast-1" : { "AMI" : "ami-14d86d15" },
        "sa-east-1"      : { "AMI" : "ami-0439e619" }
      },
  
      "AWSInstanceType2Arch" : {
        "t1.micro"    : { "Arch" : "64" },
        "m1.small"    : { "Arch" : "64" },
        "m1.medium"   : { "Arch" : "64" },
        "m1.large"    : { "Arch" : "64" },
        "m1.xlarge"   : { "Arch" : "64" },
        "m2.xlarge"   : { "Arch" : "64" },
        "m2.2xlarge"  : { "Arch" : "64" },
        "m2.4xlarge"  : { "Arch" : "64" },
        "c1.medium"   : { "Arch" : "64" },
        "c1.xlarge"   : { "Arch" : "64" },
        "cc1.4xlarge" : { "Arch" : "64Cluster" },
        "cc2.8xlarge" : { "Arch" : "64Cluster" },
        "cg1.4xlarge" : { "Arch" : "64GPU" }
      },
  
      "AWSRegionArch2AMI" : {
        "us-east-1"      : { "32" : "ami-a0cd60c9", "64" : "ami-aecd60c7", "64Cluster" : "ami-a8cd60c1",      "64GPU" : "ami-eccf6285" },
        "us-west-2"      : { "32" : "ami-46da5576", "64" : "ami-48da5578", "64Cluster" : "NOT_YET_SUPPORTED", "64GPU" : "NOT_YET_SUPPORTED" },
        "us-west-1"      : { "32" : "ami-7d4c6938", "64" : "ami-734c6936", "64Cluster" : "NOT_YET_SUPPORTED", "64GPU" : "NOT_YET_SUPPORTED" },
        "eu-west-1"      : { "32" : "ami-61555115", "64" : "ami-6d555119", "64Cluster" : "ami-67555113",      "64GPU" : "NOT_YET_SUPPORTED" },
        "ap-southeast-1" : { "32" : "ami-220b4a70", "64" : "ami-3c0b4a6e", "64Cluster" : "NOT_YET_SUPPORTED", "64GPU" : "NOT_YET_SUPPORTED" },
        "ap-northeast-1" : { "32" : "ami-2a19aa2b", "64" : "ami-2819aa29", "64Cluster" : "NOT_YET_SUPPORTED", "64GPU" : "NOT_YET_SUPPORTED" },
        "sa-east-1"      : { "32" : "ami-f836e8e5", "64" : "ami-fe36e8e3", "64Cluster" : "NOT_YET_SUPPORTED", "64GPU" : "NOT_YET_SUPPORTED" }
      },
  
      "SubnetConfig" : {
        "VPC"     : { "CIDR" : "10.0.0.0/16" },
        "Public"  : { "CIDR" : "10.0.0.0/24" },
        "Private" : { "CIDR" : "10.0.1.0/24" }
      }
    },
  
    "Resources" : {
  
      "VPC" : {
        "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },
  
      "PublicSubnet" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },
  
      "InternetGateway" : {
        "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },
  
      "GatewayToInternet" : {
         "DependsOn" : ["VPC", "InternetGateway"],
         "Type" : "AWS::EC2::VPCGatewayAttachment",
         "Properties" : {
           "VpcId" : { "Ref" : "VPC" },
           "InternetGatewayId" : { "Ref" : "InternetGateway" }
         }
      },
  
      "PublicRouteTable" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },
  
      "PublicRoute" : {
        "DependsOn" : ["PublicRouteTable", "InternetGateway"],
        "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId" : { "Ref" : "PublicRouteTable" },
          "DestinationCidrBlock" : "0.0.0.0/0",
          "GatewayId" : { "Ref" : "InternetGateway" }
        }
      },
  
      "PublicSubnetRouteTableAssociation" : {
        "DependsOn" : ["PublicSubnet", "PublicRouteTable"],
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "PublicSubnet" },
          "RouteTableId" : { "Ref" : "PublicRouteTable" }
        }
      },
  
      "PublicNetworkAcl" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
        }
      },
  
      "InboundHTTPPublicNetworkAclEntry" : {
        "DependsOn" : ["PublicNetworkAcl"],
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "80", "To" : "80" }
        }
      },
  
      "InboundHTTPSPublicNetworkAclEntry" : {
        "DependsOn" : ["PublicNetworkAcl"],
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "101",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "443", "To" : "443" }
        }
      },
  
      "InboundSSHPublicNetworkAclEntry" : {
        "DependsOn" : ["PublicNetworkAcl"],
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "102",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : { "Ref" : "SSHFrom" },
          "PortRange" : { "From" : "22", "To" : "22" }
        }
      },
  
      "InboundEmphemeralPublicNetworkAclEntry" : {
        "DependsOn" : ["PublicNetworkAcl"],
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "103",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "1024", "To" : "65535" }
        }
      },
  
      "OutboundPublicNetworkAclEntry" : {
        "DependsOn" : ["PublicNetworkAcl"],
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "0", "To" : "65535" }
        }
      },
  
      "PublicSubnetNetworkAclAssociation" : {
        "DependsOn" : ["PublicSubnet", "PublicNetworkAcl"],
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "PublicSubnet" },
          "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
        }
      },
  
      "PrivateSubnet" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private", "CIDR" ]},
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Private" }
          ]
        }
      },
  
      "PrivateRouteTable" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Private" }
          ]
        }
      },
  
      "PrivateSubnetRouteTableAssociation" : {
        "DependsOn" : ["PrivateSubnet", "PrivateRouteTable"],
        "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "PrivateSubnet" },
          "RouteTableId" : { "Ref" : "PrivateRouteTable" }
        }
      },
  
      "PrivateRoute" : {
        "DependsOn" : ["PrivateRouteTable", "NATDevice"],
        "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId" : { "Ref" : "PrivateRouteTable" },
          "DestinationCidrBlock" : "0.0.0.0/0",
          "InstanceId" : { "Ref" : "NATDevice" }
        }
      },
  
      "PrivateNetworkAcl" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "Tags" : [
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } },
            { "Key" : "Network", "Value" : "Private" }
          ]
        }
      },
  
      "InboundPrivateNetworkAclEntry" : {
        "DependsOn" : ["PrivateNetworkAcl"],
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "false",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "0", "To" : "65535" }
        }
      },
  
      "OutBoundPrivateNetworkAclEntry" : {
        "DependsOn" : ["PrivateNetworkAcl"],
        "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" },
          "RuleNumber" : "100",
          "Protocol" : "6",
          "RuleAction" : "allow",
          "Egress" : "true",
          "CidrBlock" : "0.0.0.0/0",
          "PortRange" : { "From" : "0", "To" : "65535" }
        }
      },
  
      "PrivateSubnetNetworkAclAssociation" : {
        "DependsOn" : ["PrivateSubnet", "PrivateNetworkAcl"],
        "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "PrivateSubnet" },
          "NetworkAclId" : { "Ref" : "PrivateNetworkAcl" }
        }
      },
  
      "NATIPAddress" : {
        "DependsOn" : ["NATDevice"],
        "Type" : "AWS::EC2::EIP",
        "Properties" : {
          "Domain" : "vpc",
          "InstanceId" : { "Ref" : "NATDevice" }
        }
      },
  
      "NATDevice" : {
        "DependsOn" : ["PublicSubnet", "NATSecurityGroup"],
        "Type" : "AWS::EC2::Instance",
        "Properties" : {
          "InstanceType" : { "Ref" : "NATInstanceType" },
          "SubnetId" : { "Ref" : "PublicSubnet" },
          "SourceDestCheck" : "false",
          "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
          "SecurityGroupIds" : [{ "Ref" : "NATSecurityGroup" }]
        }
      },
  
      "NATSecurityGroup" : {
        "DependsOn" : ["BeanstalkSecurityGroup"],
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Enable internal access to the NAT device",
          "VpcId" : { "Ref" : "VPC" },
          "SecurityGroupIngress" : [
             { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "SourceSecurityGroupId" : { "Ref" : "BeanstalkSecurityGroup" }} ,
             { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupId" : { "Ref" : "BeanstalkSecurityGroup" } } ],
          "SecurityGroupEgress" : [
             { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
             { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" } ]
        }
      },
  
      "BastionIPAddress" : {
        "Type" : "AWS::EC2::EIP",
        "Properties" : {
          "Domain" : "vpc",
          "InstanceId" : { "Ref" : "BastionHost" }
        }
      },
  
      "BastionHost" : {
        "DependsOn" : ["PublicSubnet", "BastionSecurityGroup"],
        "Type" : "AWS::EC2::Instance",
        "Properties" : {
          "InstanceType" : { "Ref" : "BastionInstanceType" },
          "KeyName"  : { "Ref" : "BastionKeyName" },
          "SubnetId" : { "Ref" : "PublicSubnet" },
          "ImageId"  : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "BastionInstanceType" }, "Arch" ] } ] },
          "SecurityGroupIds" : [{ "Ref" : "BastionSecurityGroup" }]
        }
      },
  
      "BastionSecurityGroup" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Enable access to the Bastion host",
          "VpcId" : { "Ref" : "VPC" },
          "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHFrom" }} ],
          "SecurityGroupEgress"  : [ { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Fn::FindInMap" : [ "SubnetConfig", "Private", "CIDR" ]}}]
        }
      },
  
      "BeanstalkSecurityGroup" : {
        "DependsOn" : ["VPC"],
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Allow the Elastic Beanstalk instances to access the NAT device",
          "VpcId" : { "Ref" : "VPC" }
        }
      },
  
      "SampleApplication" : {
        "Type" : "AWS::ElasticBeanstalk::Application",
        "Properties" : {
          "Description" : "AWS Elastic Beanstalk Python Sample Application",
          "ApplicationVersions" : [{
            "VersionLabel" : "Initial Version",
            "Description" : "Version 1.0",
            "SourceBundle" : {
              "S3Bucket" : { "Fn::Join" : ["-", ["elasticbeanstalk-samples", { "Ref" : "AWS::Region" }]]},
              "S3Key" : "python-sample.zip"
            }
          }]
        }
      },
  
      "SampleEnvironment" : {
        "DependsOn" : ["SampleApplication", "BastionSecurityGroup", "BeanstalkSecurityGroup", "VPC", "PrivateSubnet", "PublicSubnet"],
        "Type" : "AWS::ElasticBeanstalk::Environment",
        "Properties" : {
          "ApplicationName" : { "Ref" : "SampleApplication" },
           "Description" :  "AWS Elastic Beanstalk Environment running Python Sample Application",
           "SolutionStackName" : "64bit Amazon Linux running Python",
           "OptionSettings" : [
             {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "SSHSourceRestriction", "Value" : { "Fn::Join" : [ "", ["tcp,22,22,", { "Ref" : "BastionSecurityGroup" }]]}},
             {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "SecurityGroups", "Value" : { "Ref" : "BeanstalkSecurityGroup" }},
             {"Namespace" : "aws:autoscaling:launchconfiguration", "OptionName" : "EC2KeyName", "Value" : { "Ref" : "InstanceKeyName" }},
             {"Namespace" : "aws:ec2:vpc", "OptionName" : "VPCId", "Value" : { "Ref" : "VPC" }},
             {"Namespace" : "aws:ec2:vpc", "OptionName" : "Subnets", "Value" : { "Ref" : "PrivateSubnet" }},
             {"Namespace" : "aws:ec2:vpc", "OptionName" : "ELBSubnets", "Value" : { "Ref" : "PublicSubnet" }}],
           "VersionLabel" : "Initial Version"
        }
      }
    },
  
    "Outputs" : {
  
      "Bastion" : {
        "Description" : "IP Address of the Bastion host",
        "Value" :  { "Ref" : "BastionIPAddress" }
      },
      "URL" : {
        "Description" : "The URL of the Elastic Beanstalk environment",
        "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : ["SampleEnvironment", "EndpointURL"] }]]}
      }
    }
  }